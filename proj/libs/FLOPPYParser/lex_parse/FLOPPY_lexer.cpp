#line 2 "FLOPPY_lexer.cpp"

#line 4 "FLOPPY_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 64
#define YY_END_OF_BUFFER 65
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[488] =
    {   0,
        0,    0,    2,    2,    0,    0,   65,   63,    7,    7,
       63,   63,   63,   56,   56,   56,   56,   59,   56,   56,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,    2,    2,    3,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        7,   52,    0,   60,    0,   61,    1,   58,    4,   57,
       59,   50,   53,   51,   62,   62,   40,   62,   62,   34,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       25,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,    2,    2,    2,    2,    2,    2,    2,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    6,   57,   41,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   15,   13,   62,   44,
       45,   49,   48,   62,   62,   62,   62,   62,   62,   32,
       62,   46,   62,   62,   62,   62,   62,   62,   62,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

       62,   62,   62,   62,   62,   62,   62,   24,   62,   62,
       62,   29,   62,   62,   62,   62,   62,   26,   62,   47,
       22,   62,   62,   62,   62,   62,   62,   54,   62,   62,
       62,   62,   62,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   62,   62,   42,   62,
       62,   62,   62,   55,   16,   62,   33,   62,   21,   62,
       62,   37,   36,   62,   62,   62,   23,    9,   62,   62,
       62,   62,   30,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       62,   62,    8,   62,   28,   62,   62,   35,   39,   62,
       62,   62,   20,   31,   27,   62,   62,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   43,   17,   62,   62,   12,   15,
       11,   62,   19,   62,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   18,   38,   62,   10,    2,    2,
        2,    2,   62,    2,   14,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    1,    6,    7,
        7,    8,    7,    7,    9,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,    7,   13,
       14,   15,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       25,   32,   33,   34,   35,   36,   37,   38,   39,   25,
        1,    1,    1,    1,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   25,   50,   51,   52,   53,
       54,   55,   25,   56,   57,   58,   59,   60,   61,   62,
       63,   25,    7,    1,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[64] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[495] =
    {   0,
        0,    0,   63,    0,  126,    0,  779, 1875,  188,  190,
      762,  768,  755, 1875,  749,  735,  733,  184,  183,  710,
      166,  170,  171,  190,    0,  202,  172,  189,  183,  193,
      191,  221,  212,  188,  216,  229,  232,  241,  223,  239,
      236,    0,  205,  258,  678,  276,  262,    0,  657,  649,
      651,  273,  274,  630,  297,  357,  283,  405,  284,  453,
      286,  339,  290,  353,  351,  385,  297,  423,  356,  388,
      497,  433,  427,  472,  475, 1875,  292,  332,  625,  633,
      541, 1875,  480,  436,  419,  386,  280,  362,  368,  288,
      393,  374,  517,    0,  518,  244,  358,  299,  377,  389,

      454,  471,  411,  347,  455,  526,  483,  386,  524,  470,
      382, 1875,  326, 1875,  303, 1875, 1875,  284, 1875,  274,
      379, 1875, 1875, 1875,    0,  478,    0,  499,  406,    0,
      496,  523,  519,  536,  531,  537,  543,  545,  544,  549,
      550,  546,  564,  547,  561,  552,  563,  565,  559,  568,
      569,  582,  578,  584,  584,  580,  584,  598,  588,  605,
      601,  602,  605,    0,  518,    0,  468,    0,  631,    0,
        0,  252,    0,  238,  500,    0,    0,    0,  602,  624,
      616,  628,  621,  632,  642,  644,  646,  663,  664,  669,
      683,  676,  699,  681,  686,  706,  751,  689,  720,  726,

      738,  763,  764,  724,  785,  767,  780,  807,  808,  824,
      828,  835,  810,  849,  865,  869,  870, 1875,  209,    0,
      613,  661,  704,  755,  780,  796,  765,  789,  798,  816,
      840,  853,  848,  852,  866,  882,  905,    0,  882,    0,
        0,    0,    0,  867,  871,  893,  889,  894,  902,    0,
      902,    0,  902,  910,  920,  905,  919,  926,  912,  204,
      915,  926,  933,  944,  936,  956,  961,  974,  963,  981,
     1000, 1001,  995, 1013, 1012, 1039, 1040, 1051,  949, 1038,
     1026, 1043, 1044, 1056, 1061, 1069, 1091, 1088, 1105, 1108,
     1083, 1109, 1113, 1130, 1135, 1161, 1131, 1165, 1162, 1143,

      930, 1084,  951,  971,  999, 1083, 1085,    0, 1111, 1130,
     1162,    0, 1165, 1176, 1169, 1177, 1165,    0, 1176,    0,
        0, 1181, 1198, 1185, 1200, 1187, 1202,    0, 1192, 1203,
     1204, 1196, 1212, 1219, 1216, 1229, 1232, 1235, 1242, 1264,
     1245, 1271, 1272, 1290, 1282, 1292, 1303, 1310, 1311, 1329,
     1298, 1324, 1330, 1332, 1349, 1359, 1367, 1372, 1380, 1388,
     1377, 1390, 1416, 1402, 1415, 1427, 1220, 1237,    0, 1417,
     1415, 1432, 1211,    0,    0, 1436,    0, 1437,    0, 1222,
     1440,    0,    0, 1253, 1443, 1336,    0,    0, 1447, 1344,
     1452, 1447,    0, 1452, 1459, 1456, 1481, 1478, 1484, 1495,

     1477, 1479, 1506, 1500, 1529, 1507, 1532, 1535, 1534, 1542,
     1545, 1573, 1548, 1561, 1574, 1587, 1586, 1605, 1599, 1600,
     1460, 1351,    0, 1357,    0, 1469, 1468,    0,    0, 1511,
     1546, 1581,    0,    0,    0, 1599, 1606, 1622, 1635, 1617,
     1630, 1636, 1661, 1648, 1642, 1653, 1678, 1664, 1683, 1667,
     1684, 1689, 1701, 1712,    0,    0, 1600, 1686,    0,    0,
        0, 1652,    0, 1705, 1715, 1719, 1740, 1737, 1723, 1726,
     1729, 1754, 1751, 1768,    0,    0, 1754,    0, 1757, 1771,
     1782, 1776, 1771, 1793,    0, 1779, 1875, 1856, 1859,  208,
     1862, 1865, 1868, 1871

    } ;

static yyconst flex_int16_t yy_def[495] =
    {   0,
      487,    1,  487,    3,  487,    5,  487,  487,  487,  487,
      487,  488,  489,  487,  487,  487,  487,  487,  487,  487,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  491,  491,  487,  491,  492,  493,  491,  491,  491,
      491,  491,  491,  491,  494,  494,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,  487,  487,  487,  487,  488,
      489,  487,  487,  487,  487,  487,  487,  487,  487,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,

      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      487,  487,  488,  487,  489,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  491,  491,  491,  492,  491,  493,  491,
      491,  491,  491,  491,  491,  491,  491,  491,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,  487,  487,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  491,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,  490,  490,  490,  490,   56,   56,
       56,   56,  490,   56,  490,   56,    0,  487,  487,  487,
      487,  487,  487,  487

    } ;

static yyconst flex_int16_t yy_nxt[1939] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   14,   15,   16,
       17,   18,   19,   14,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   25,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   25,   25,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   25,   25,   42,   43,   44,   45,   46,   47,   48,
       48,   49,   50,   51,   52,   53,   48,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   59,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,

       59,   59,   42,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   59,   59,   76,   77,   78,   79,
       80,   81,   82,   83,   84,   85,   86,   87,   88,   82,
       89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
       94,   99,  100,  101,  102,  103,  104,  105,  106,  107,
      108,  109,  110,   94,   94,   76,   90,   91,   92,   93,
       94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
      104,  105,  106,  107,  108,  109,  110,   94,   94,  111,
      111,  111,  111,  120,  126,  121,  122,  123,  127,  129,

      131,  128,  132,  141,  142,  133,  165,  111,  130,  134,
      125,  143,  144,  135,  145,  260,  151,  137,  126,  152,
      219,  136,  127,  129,  131,  128,  132,  141,  138,  142,
      133,  139,  130,  140,  134,  143,  146,  144,  135,  145,
      151,  149,  137,  152,  147,  136,  150,  153,  154,  260,
      148,  155,  138,  160,  161,  139,  158,  140,  163,  111,
      111,  146,  156,  172,  115,  149,  157,  170,  162,  147,
      150,  153,  159,  154,  148,  141,  155,  160,  113,  161,
      168,  158,  174,  163,  175,  219,  156,  176,  177,  120,
      157,  121,  162,  111,  111,  118,  159,  164,  164,  141,

      164,  164,  164,  164,  164,  164,  164,  164,  116,  164,
      164,  164,  185,  179,  186,  179,  126,  195,  197,  179,
      127,  179,  179,  128,  179,  180,  203,  143,  179,  181,
      114,  204,  182,  111,  111,  179,  185,  179,  186,  179,
      126,  195,  197,  179,  127,  179,  179,  128,  179,  180,
      203,  143,  179,  181,  196,  204,  182,  164,  164,  179,
      164,  164,  164,  164,  164,  164,  164,  164,  179,  164,
      164,  164,  198,  142,  199,  122,  123,  179,  153,  196,
      179,  124,  179,  111,  111,  179,  183,  207,  120,  179,
      121,  179,  179,  119,  179,  184,  144,  198,  142,  199,

      200,  179,  153,  131,  179,  132,  179,  208,  201,  179,
      183,  207,  145,  179,  202,  179,  160,  179,  179,  184,
      187,  144,  129,  179,  188,  200,  179,  131,  189,  132,
      118,  130,  208,  201,  179,  222,  190,  145,  202,  151,
      160,  179,  152,  179,  117,  187,  129,  179,  212,  188,
      179,  205,  179,  189,  206,  130,  179,  214,  179,  222,
      190,  179,  179,  151,  213,  179,  152,  179,  191,  146,
      113,  179,  168,  212,  154,  205,  179,  147,  206,  192,
      179,  214,  193,  148,  194,  179,  179,  215,  213,  179,
      218,  179,  163,  191,  146,  179,  220,  217,  158,  154,

      149,  216,  147,  192,  179,  150,  193,  148,  194,  174,
      179,  175,  215,  179,  159,  179,  209,  163,  221,  165,
      111,  220,  217,  158,  149,  216,  179,  210,  179,  150,
      223,  211,  133,  137,  179,  179,  134,  179,  159,  161,
      135,  209,  224,  221,  138,  155,  116,  139,  136,  140,
      179,  210,  225,  162,  223,  211,  156,  133,  137,  179,
      157,  134,  226,  227,  161,  135,  228,  224,  138,  229,
      155,  139,  136,  140,  230,  231,  225,  162,  232,  233,
      156,  234,  235,  242,  157,  238,  226,  227,  239,  240,
      228,  241,  243,  229,  244,  245,  236,  237,  230,  231,

      246,  247,  232,  233,  248,  234,  251,  235,  242,  238,
      249,  252,  239,  240,  253,  241,  243,  250,  244,  245,
      236,  237,  254,  255,  259,  246,  247,  256,  258,  248,
      251,  179,  257,  115,  249,  252,  170,  114,  112,  253,
      179,  250,  261,  178,  301,  179,  254,  262,  255,  259,
      263,  256,  258,  179,  179,  179,  257,  179,  173,  179,
      172,  179,  179,  265,  179,  171,  179,  261,  301,  179,
      179,  179,  262,  179,  263,  179,  264,  179,  179,  266,
      179,  179,  179,  179,  179,  179,  179,  302,  265,  267,
      179,  166,  179,  179,  179,  179,  268,  179,  269,  179,

      264,  179,  179,  266,  179,  271,  179,  179,  179,  270,
      273,  302,  179,  267,  179,  274,  179,  179,  179,  179,
      268,  179,  269,  124,  179,  179,  179,  279,  179,  271,
      272,  179,  303,  270,  273,  179,  179,  179,  179,  274,
      119,  275,  179,  179,  179,  179,  118,  280,  179,  179,
      285,  279,  179,  179,  272,  179,  303,  117,  179,  179,
      116,  179,  179,  281,  179,  275,  282,  179,  179,  276,
      304,  280,  114,  179,  285,  112,  179,  179,  487,  179,
      179,  283,  179,  277,  278,  287,  179,  281,  179,  179,
      282,  179,  179,  179,  276,  304,  179,  284,  307,  305,

      179,  179,  179,  288,  179,  179,  283,  277,  278,  179,
      287,  286,  487,  179,  179,  306,  179,  179,  179,  308,
      179,  284,  307,  179,  305,  179,  179,  289,  288,  179,
      309,  310,  487,  179,  290,  286,  179,  179,  179,  179,
      306,  291,  179,  308,  295,  179,  179,  179,  179,  487,
      292,  294,  289,  179,  309,  293,  310,  179,  290,  311,
      179,  179,  179,  179,  179,  291,  179,  296,  295,  179,
      179,  487,  179,  179,  292,  314,  294,  179,  179,  293,
      312,  179,  313,  487,  311,  315,  179,  179,  179,  300,
      179,  297,  296,  320,  179,  299,  298,  179,  179,  179,

      314,  316,  179,  179,  312,  319,  313,  179,  179,  321,
      315,  179,  322,  324,  300,  297,  323,  320,  179,  299,
      298,  325,  179,  179,  317,  326,  316,  179,  327,  328,
      319,  179,  179,  321,  318,  329,  331,  322,  324,  330,
      323,  332,  487,  333,  179,  367,  325,  487,  487,  317,
      326,  337,  327,  179,  328,  179,  487,  334,  318,  335,
      329,  331,  179,  330,  179,  179,  332,  333,  179,  487,
      367,  179,  336,  179,  179,  338,  337,  179,  179,  179,
      339,  334,  179,  335,  369,  179,  179,  179,  179,  179,
      179,  487,  179,  341,  179,  179,  336,  179,  179,  179,

      338,  179,  179,  179,  370,  339,  179,  340,  369,  179,
      179,  179,  179,  342,  179,  343,  179,  341,  179,  179,
      344,  487,  345,  179,  179,  179,  487,  179,  370,  179,
      179,  340,  371,  179,  179,  347,  179,  342,  179,  179,
      343,  179,  179,  179,  487,  344,  345,  346,  179,  487,
      179,  179,  487,  179,  179,  179,  371,  179,  348,  349,
      347,  352,  179,  179,  179,  179,  179,  179,  179,  179,
      350,  346,  179,  179,  179,  179,  179,  179,  179,  179,
      351,  179,  179,  348,  349,  179,  352,  353,  179,  179,
      179,  179,  179,  179,  179,  350,  179,  179,  179,  179,

      179,  179,  179,  368,  351,  179,  179,  354,  373,  179,
      355,  353,  179,  179,  179,  356,  372,  179,  179,  487,
      179,  179,  179,  179,  357,  487,  179,  358,  368,  179,
      374,  354,  359,  373,  179,  355,  179,  179,  179,  356,
      372,  179,  179,  179,  179,  179,  179,  179,  487,  357,
      179,  179,  358,  179,  361,  374,  360,  359,  179,  179,
      179,  179,  179,  375,  179,  363,  179,  179,  179,  179,
      179,  179,  179,  179,  366,  179,  362,  365,  487,  361,
      360,  179,  364,  179,  179,  376,  381,  375,  179,  363,
      179,  179,  179,  179,  179,  377,  179,  179,  366,  179,

      179,  362,  365,  179,  378,  179,  379,  364,  380,  382,
      376,  381,  383,  384,  179,  179,  385,  386,  179,  377,
      387,  388,  390,  179,  179,  389,  391,  179,  378,  392,
      379,  393,  380,  382,  394,  395,  383,  487,  384,  426,
      385,  421,  386,  487,  387,  179,  388,  390,  179,  389,
      487,  391,  422,  392,  179,  429,  393,  179,  179,  394,
      395,  179,  396,  426,  179,  397,  421,  179,  398,  179,
      179,  179,  179,  179,  179,  399,  487,  422,  179,  429,
      179,  179,  179,  179,  431,  179,  396,  400,  179,  397,
      401,  179,  398,  179,  179,  179,  487,  179,  179,  399,

      179,  179,  179,  487,  179,  402,  487,  179,  431,  179,
      179,  179,  400,  403,  487,  401,  487,  179,  487,  179,
      179,  179,  404,  487,  179,  179,  179,  179,  179,  402,
      179,  405,  179,  179,  179,  179,  179,  487,  403,  179,
      179,  179,  407,  179,  179,  179,  404,  406,  179,  179,
      408,  179,  179,  179,  179,  405,  179,  409,  179,  179,
      179,  179,  179,  179,  179,  179,  407,  179,  179,  433,
      179,  406,  179,  179,  411,  408,  435,  179,  179,  456,
      410,  409,  179,  179,  457,  179,  179,  179,  179,  413,
      487,  179,  179,  433,  179,  487,  179,  179,  412,  411,

      435,  179,  179,  456,  410,  179,  179,  415,  457,  179,
      179,  179,  179,  414,  413,  179,  487,  179,  179,  179,
      179,  179,  412,  416,  418,  179,  179,  487,  179,  179,
      179,  179,  415,  179,  179,  417,  423,  414,  424,  179,
      179,  179,  179,  179,  179,  179,  420,  416,  419,  418,
      179,  425,  179,  179,  179,  179,  179,  427,  428,  430,
      417,  423,  432,  424,  179,  179,  434,  436,  179,  179,
      437,  420,  419,  438,  439,  487,  425,  179,  179,  455,
      179,  179,  427,  428,  430,  179,  458,  432,  179,  179,
      179,  434,  436,  487,  179,  437,  459,  179,  438,  439,

      440,  441,  487,  442,  455,  179,  179,  179,  179,  179,
      179,  458,  179,  179,  179,  179,  179,  179,  179,  179,
      459,  179,  179,  443,  179,  440,  441,  444,  442,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  460,  179,  179,  179,  179,  443,  179,  487,
      445,  487,  444,  179,  447,  487,  487,  179,  179,  179,
      179,  179,  179,  179,  179,  446,  460,  179,  179,  179,
      179,  179,  179,  179,  179,  445,  448,  179,  487,  447,
      179,  450,  179,  179,  461,  179,  179,  179,  179,  446,
      179,  179,  449,  487,  179,  179,  179,  179,  179,  179,

      448,  179,  179,  179,  179,  450,  451,  179,  461,  462,
      179,  179,  179,  487,  179,  179,  179,  449,  452,  475,
      453,  487,  454,  179,  179,  179,  179,  179,  179,  179,
      463,  451,  464,  462,  179,  179,  179,  179,  179,  179,
      179,  465,  452,  179,  475,  453,  179,  454,  179,  179,
      487,  179,  179,  179,  463,  179,  464,  467,  179,  179,
      179,  179,  179,  466,  179,  179,  465,  179,  179,  477,
      179,  179,  487,  179,  179,  179,  469,  179,  468,  179,
      179,  467,  179,  179,  179,  487,  179,  466,  179,  179,
      179,  179,  179,  179,  477,  179,  179,  179,  179,  179,

      469,  179,  471,  468,  179,  179,  179,  179,  487,  470,
      179,  472,  179,  179,  179,  179,  179,  179,  179,  476,
      179,  179,  179,  179,  478,  487,  471,  179,  487,  179,
      179,  179,  473,  470,  487,  472,  179,  179,  474,  179,
      179,  179,  179,  476,  179,  179,  179,  487,  179,  478,
      179,  179,  179,  179,  179,  179,  473,  179,  179,  479,
      487,  179,  474,  179,  179,  179,  179,  179,  179,  179,
      480,  481,  179,  483,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  479,  179,  179,  482,  179,  179,
      179,  179,  179,  179,  480,  179,  481,  179,  483,  179,

      179,  484,  179,  485,  179,  179,  179,  179,  179,  179,
      179,  179,  482,  179,  179,  487,  179,  179,  487,  179,
      179,  179,  179,  487,  179,  486,  484,  485,  487,  179,
      179,  179,  179,  179,  487,  179,  487,  487,  179,  487,
      487,  179,  487,  487,  179,  487,  179,  487,  487,  486,
      487,  487,  487,  487,  487,  179,  113,  113,  113,  115,
      115,  115,  164,  487,  164,  167,  167,  167,  169,  169,
      169,  179,  487,  179,    7,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487
    } ;

static yyconst flex_int16_t yy_chk[1939] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    9,
        9,   10,   10,   18,   21,   18,   19,   19,   21,   22,

       23,   21,   23,   27,   28,   24,   43,   43,   22,   24,
      490,   29,   30,   24,   31,  260,   34,   26,   21,   34,
      219,   24,   21,   22,   23,   21,   23,   27,   26,   28,
       24,   26,   22,   26,   24,   29,   32,   30,   24,   31,
       34,   33,   26,   34,   32,   24,   33,   35,   36,  174,
       32,   37,   26,   39,   40,   26,   38,   26,   41,   44,
       44,   32,   37,  172,   47,   33,   37,   47,   40,   32,
       33,   35,   38,   36,   32,   96,   37,   39,   46,   40,
       46,   38,   52,   41,   52,  120,   37,   53,   53,   87,
       37,   87,   40,   77,   77,  118,   38,   55,   55,   96,

       55,   55,   55,   55,   55,   55,   55,   55,  115,   55,
       55,   55,   57,   59,   57,   61,   90,   61,   63,   63,
       90,   57,   59,   90,   61,   55,   67,   98,   63,   55,
      113,   67,   55,   78,   78,   67,   57,   59,   57,   61,
       90,   61,   63,   63,   90,   57,   59,   90,   61,   55,
       67,   98,   63,   55,   62,   67,   55,   56,   56,   67,
       56,   56,   56,   56,   56,   56,   56,   56,   62,   56,
       56,   56,   64,   97,   65,   88,   88,   62,  104,   62,
       65,   89,   64,  111,  111,   69,   56,   69,  121,   65,
      121,   64,   62,   86,   69,   56,   99,   64,   97,   65,

       66,   62,  104,   92,   65,   92,   64,   70,   66,   69,
       56,   69,  100,   65,   66,   64,  108,   70,   69,   56,
       58,   99,   91,   66,   58,   66,   70,   92,   58,   92,
       85,   91,   70,   66,   58,  129,   58,  100,   66,  103,
      108,   70,  103,   58,   84,   58,   91,   66,   72,   58,
       70,   68,   68,   58,   68,   91,   73,   73,   58,  129,
       58,   68,   72,  103,   72,   73,  103,   58,   60,  101,
      167,   72,  167,   72,  105,   68,   68,  101,   68,   60,
       73,   73,   60,  101,   60,   68,   72,   74,   72,   73,
       83,   60,  110,   60,  101,   72,  126,   75,  107,  105,

      102,   74,  101,   60,   75,  102,   60,  101,   60,  175,
       74,  175,   74,   75,  107,   60,   71,  110,  128,  165,
      165,  126,   75,  107,  102,   74,   71,   71,   75,  102,
      131,   71,   93,   95,   74,   71,   93,   75,  107,  109,
       93,   71,  132,  128,   95,  106,   81,   95,   93,   95,
       71,   71,  133,  109,  131,   71,  106,   93,   95,   71,
      106,   93,  134,  135,  109,   93,  136,  132,   95,  137,
      106,   95,   93,   95,  138,  139,  133,  109,  140,  141,
      106,  142,  143,  148,  106,  144,  134,  135,  145,  146,
      136,  147,  149,  137,  150,  151,  143,  143,  138,  139,

      152,  153,  140,  141,  154,  142,  156,  143,  148,  144,
      155,  157,  145,  146,  158,  147,  149,  155,  150,  151,
      143,  143,  159,  160,  163,  152,  153,  161,  162,  154,
      156,  179,  161,  169,  155,  157,  169,   80,   79,  158,
      179,  155,  180,   54,  221,  181,  159,  182,  160,  163,
      183,  161,  162,  180,  181,  179,  161,  182,   51,  183,
       50,  184,  180,  186,  179,   49,  182,  180,  221,  181,
      184,  185,  182,  186,  183,  187,  185,  180,  181,  187,
      185,  182,  186,  183,  187,  184,  180,  222,  186,  188,
      182,   45,  188,  189,  184,  185,  189,  186,  190,  187,

      185,  188,  189,  187,  185,  192,  186,  190,  187,  191,
      194,  222,  191,  188,  192,  195,  188,  189,  198,  194,
      189,  191,  190,   20,  195,  188,  189,  198,  193,  192,
      193,  190,  223,  191,  194,  196,  191,  193,  192,  195,
       17,  196,  198,  194,  196,  191,   16,  199,  195,  199,
      204,  198,  193,  204,  193,  200,  223,   15,  199,  196,
       13,  193,  204,  200,  200,  196,  201,  201,  196,  197,
      224,  199,   12,  199,  204,   11,  201,  204,    7,  200,
      197,  202,  199,  197,  197,  206,  204,  200,  200,  197,
      201,  201,  202,  203,  197,  224,  206,  203,  227,  225,

      201,  202,  203,  207,  197,  206,  202,  197,  197,  207,
      206,  205,    0,  197,  205,  226,  202,  203,  207,  228,
      206,  203,  227,  205,  225,  202,  203,  208,  207,  206,
      229,  230,    0,  207,  209,  205,  208,  209,  205,  213,
      226,  209,  207,  228,  213,  208,  209,  205,  213,    0,
      210,  212,  208,  210,  229,  211,  230,  211,  209,  231,
      208,  209,  210,  213,  212,  209,  211,  214,  213,  208,
      209,    0,  213,  212,  210,  234,  212,  210,  214,  211,
      232,  211,  233,    0,  231,  235,  210,  214,  212,  217,
      211,  215,  214,  244,  215,  216,  215,  212,  216,  217,

      234,  236,  214,  215,  232,  239,  233,  216,  217,  245,
      235,  214,  246,  248,  217,  215,  247,  244,  215,  216,
      215,  249,  216,  217,  237,  251,  236,  215,  253,  254,
      239,  216,  217,  245,  237,  255,  257,  246,  248,  256,
      247,  258,    0,  259,  261,  301,  249,    0,    0,  237,
      251,  265,  253,  261,  254,  262,    0,  262,  237,  263,
      255,  257,  263,  256,  262,  265,  258,  259,  261,    0,
      301,  263,  264,  264,  265,  266,  265,  261,  279,  262,
      267,  262,  264,  263,  303,  266,  263,  279,  262,  265,
      267,    0,  269,  269,  266,  263,  264,  264,  265,  267,

      266,  269,  279,  268,  304,  267,  264,  268,  303,  266,
      270,  279,  268,  270,  267,  271,  269,  269,  266,  270,
      272,    0,  273,  267,  273,  269,    0,  268,  304,  271,
      272,  268,  305,  273,  270,  275,  268,  270,  271,  272,
      271,  275,  274,  270,    0,  272,  273,  274,  273,    0,
      275,  274,    0,  271,  272,  281,  305,  273,  276,  277,
      275,  280,  271,  272,  281,  275,  274,  280,  276,  277,
      278,  274,  282,  283,  275,  274,  280,  276,  277,  281,
      278,  282,  283,  276,  277,  284,  280,  285,  281,  278,
      285,  280,  276,  277,  284,  278,  282,  283,  286,  285,

      280,  276,  277,  302,  278,  282,  283,  286,  307,  284,
      287,  285,  291,  278,  285,  288,  306,  288,  284,    0,
      287,  291,  286,  285,  289,    0,  288,  290,  302,  287,
      309,  286,  292,  307,  289,  287,  291,  290,  292,  288,
      306,  288,  293,  289,  287,  291,  290,  292,    0,  289,
      288,  293,  290,  287,  295,  309,  294,  292,  289,  294,
      297,  290,  292,  310,  295,  297,  293,  289,  294,  297,
      290,  292,  300,  295,  300,  293,  296,  299,    0,  295,
      294,  300,  298,  294,  297,  311,  317,  310,  295,  297,
      296,  299,  294,  297,  298,  313,  300,  295,  300,  296,

      299,  296,  299,  298,  314,  300,  315,  298,  316,  319,
      311,  317,  322,  323,  296,  299,  324,  325,  298,  313,
      326,  327,  330,  296,  299,  329,  331,  298,  314,  332,
      315,  333,  316,  319,  334,  335,  322,    0,  323,  373,
      324,  367,  325,    0,  326,  335,  327,  330,  334,  329,
        0,  331,  368,  332,  335,  380,  333,  334,  336,  334,
      335,  337,  336,  373,  338,  337,  367,  336,  338,  335,
      337,  339,  334,  338,  341,  339,    0,  368,  335,  380,
      339,  334,  336,  341,  384,  337,  336,  340,  338,  337,
      342,  336,  338,  340,  337,  339,    0,  338,  341,  339,

      342,  343,  340,    0,  339,  343,    0,  341,  384,  342,
      343,  345,  340,  344,    0,  342,    0,  340,    0,  344,
      345,  346,  346,    0,  342,  343,  340,  351,  344,  343,
      346,  347,  347,  342,  343,  345,  351,    0,  344,  348,
      349,  347,  349,  344,  345,  346,  346,  348,  348,  349,
      350,  351,  344,  352,  346,  347,  347,  352,  350,  353,
      351,  354,  352,  348,  349,  347,  349,  350,  353,  386,
      354,  348,  348,  349,  356,  350,  390,  352,  355,  422,
      355,  352,  350,  353,  424,  354,  352,  355,  356,  358,
        0,  350,  353,  386,  354,    0,  357,  356,  357,  356,

      390,  358,  355,  422,  355,  357,  361,  360,  424,  359,
      358,  355,  356,  359,  358,  361,    0,  360,  359,  362,
      357,  356,  357,  362,  364,  358,  360,    0,  362,  357,
      361,  364,  360,  359,  358,  363,  370,  359,  371,  361,
      364,  360,  359,  362,  365,  363,  366,  362,  365,  364,
      360,  372,  362,  365,  363,  364,  366,  376,  378,  381,
      363,  370,  385,  371,  364,  366,  389,  391,  365,  363,
      392,  366,  365,  394,  395,    0,  372,  365,  363,  421,
      366,  394,  376,  378,  381,  396,  426,  385,  395,  366,
      394,  389,  391,    0,  396,  392,  427,  395,  394,  395,

      397,  398,    0,  399,  421,  394,  401,  398,  402,  396,
      397,  426,  395,  399,  394,  401,  398,  402,  396,  397,
      427,  395,  399,  400,  400,  397,  398,  403,  399,  404,
      401,  398,  402,  400,  397,  403,  406,  399,  404,  401,
      398,  402,  430,  397,  403,  406,  399,  400,  400,    0,
      405,    0,  403,  404,  408,    0,    0,  400,  405,  403,
      406,  407,  404,  409,  408,  407,  430,  405,  403,  406,
      407,  410,  409,  408,  411,  405,  411,  413,    0,  408,
      410,  413,  405,  411,  431,  407,  413,  409,  408,  407,
      414,  405,  412,    0,  407,  410,  409,  408,  411,  414,

      411,  413,  412,  415,  410,  413,  416,  411,  431,  432,
      413,  412,  415,    0,  414,  417,  416,  412,  417,  457,
      418,    0,  419,  414,  417,  416,  412,  415,  419,  420,
      436,  416,  437,  432,  418,  412,  415,  419,  420,  417,
      416,  438,  417,  418,  457,  418,  440,  419,  417,  416,
        0,  438,  419,  420,  436,  440,  437,  441,  418,  441,
      438,  419,  420,  439,  439,  442,  438,  418,  441,  462,
      440,  445,    0,  439,  442,  438,  444,  444,  443,  440,
      445,  441,  446,  441,  438,    0,  444,  439,  439,  442,
      443,  446,  441,  448,  462,  445,  450,  439,  442,  443,

      444,  444,  448,  443,  445,  450,  446,  447,    0,  447,
      444,  449,  449,  451,  443,  446,  447,  448,  452,  458,
      450,  449,  451,  443,  464,    0,  448,  452,    0,  450,
      453,  447,  453,  447,    0,  449,  449,  451,  454,  453,
      447,  454,  452,  458,  465,  449,  451,    0,  466,  464,
      454,  452,  469,  465,  453,  470,  453,  466,  471,  467,
        0,  469,  454,  453,  470,  454,  468,  471,  465,  467,
      468,  472,  466,  477,  454,  468,  469,  465,  467,  470,
      473,  466,  471,  472,  467,  469,  479,  474,  470,  473,
      468,  471,  472,  467,  468,  479,  472,  474,  477,  468,

      480,  481,  467,  483,  473,  482,  474,  472,  486,  480,
      479,  481,  474,  473,  482,    0,  472,  486,    0,  479,
      481,  474,  484,    0,  480,  484,  481,  483,    0,  482,
      474,  484,  486,  480,    0,  481,    0,    0,  482,    0,
        0,  486,    0,    0,  481,    0,  484,    0,    0,  484,
        0,    0,    0,    0,    0,  484,  488,  488,  488,  489,
      489,  489,  491,    0,  491,  492,  492,  492,  493,  493,
      493,  494,    0,  494,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "FLOPPY_lexer.l"
/*
 * FLOPPY Lexer
 *
 * For CPE 468 Spring 2016 (Dekhtyar)
 * Written by Andrew Wang
 */
#line 8 "FLOPPY_lexer.l"
#include "FLOPPY_parser.h"
#include <stdio.h>
#include <stdlib.h>
/* Remove stupid y.def.h naming to be constant FLOPPY_ */
/* Flags to make it work */
/* Create Comment and BlockComment States */
 
 
#line 1038 "FLOPPY_lexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define BLOCKCOMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * yyget_lval (yyscan_t yyscanner );

void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *yyget_lloc (yyscan_t yyscanner );
    
        void yyset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 31 "FLOPPY_lexer.l"

#line 1281 "FLOPPY_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 488 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 487 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 32 "FLOPPY_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 33 "FLOPPY_lexer.l"
/* skip anything thats in a comment */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 34 "FLOPPY_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 36 "FLOPPY_lexer.l"
BEGIN(BLOCKCOMMENT);
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 37 "FLOPPY_lexer.l"
/* skip anything thats in a comment block */;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 38 "FLOPPY_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 40 "FLOPPY_lexer.l"
/* skip isspace() */;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 42 "FLOPPY_lexer.l"
{ return FLOPPY_CREATE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 43 "FLOPPY_lexer.l"
{ return FLOPPY_TABLE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 44 "FLOPPY_lexer.l"
{ return FLOPPY_VOLATILE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 45 "FLOPPY_lexer.l"
{ return FLOPPY_PRIMARY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 46 "FLOPPY_lexer.l"
{ return FLOPPY_FOREIGN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 47 "FLOPPY_lexer.l"
{ return FLOPPY_KEY; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 48 "FLOPPY_lexer.l"
{ return FLOPPY_REFERENCES; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 49 "FLOPPY_lexer.l"
{ return FLOPPY_INT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 50 "FLOPPY_lexer.l"
{ return FLOPPY_FLOAT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 51 "FLOPPY_lexer.l"
{ return FLOPPY_BOOLEAN; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 52 "FLOPPY_lexer.l"
{ return FLOPPY_DATETIME; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 53 "FLOPPY_lexer.l"
{ return FLOPPY_VARCHAR; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 55 "FLOPPY_lexer.l"
{ return FLOPPY_SELECT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 56 "FLOPPY_lexer.l"
{ return FLOPPY_INDEX; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 57 "FLOPPY_lexer.l"
{ return FLOPPY_ONLY; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 58 "FLOPPY_lexer.l"
{ return FLOPPY_SPLIT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 59 "FLOPPY_lexer.l"
{ return FLOPPY_DROP; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 60 "FLOPPY_lexer.l"
{ return FLOPPY_ON; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 61 "FLOPPY_lexer.l"
{ return FLOPPY_INTO; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 62 "FLOPPY_lexer.l"
{ return FLOPPY_VALUES; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 63 "FLOPPY_lexer.l"
{ return FLOPPY_DELETE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 64 "FLOPPY_lexer.l"
{ return FLOPPY_FROM; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 65 "FLOPPY_lexer.l"
{ return FLOPPY_WHERE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 66 "FLOPPY_lexer.l"
{ return FLOPPY_UPDATE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 67 "FLOPPY_lexer.l"
{ return FLOPPY_SET; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 68 "FLOPPY_lexer.l"
{ return FLOPPY_GROUP; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 69 "FLOPPY_lexer.l"
{ return FLOPPY_BY; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 70 "FLOPPY_lexer.l"
{ return FLOPPY_HAVING; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 71 "FLOPPY_lexer.l"
{ return FLOPPY_ORDER; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 72 "FLOPPY_lexer.l"
{ return FLOPPY_LIMIT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 73 "FLOPPY_lexer.l"
{ return FLOPPY_DISTINCT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 74 "FLOPPY_lexer.l"
{ return FLOPPY_INSERT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 75 "FLOPPY_lexer.l"
{ return FLOPPY_AS; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 77 "FLOPPY_lexer.l"
{ return FLOPPY_AND; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 78 "FLOPPY_lexer.l"
{ return FLOPPY_COUNT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 79 "FLOPPY_lexer.l"
{ return FLOPPY_AVERAGE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 80 "FLOPPY_lexer.l"
{ return FLOPPY_MAX; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 81 "FLOPPY_lexer.l"
{ return FLOPPY_MIN; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 82 "FLOPPY_lexer.l"
{ return FLOPPY_SUM; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 83 "FLOPPY_lexer.l"
{ return FLOPPY_NULL; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 85 "FLOPPY_lexer.l"
{ return FLOPPY_NOT; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 86 "FLOPPY_lexer.l"
{ return FLOPPY_MOD; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 87 "FLOPPY_lexer.l"
{ return FLOPPY_LE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 88 "FLOPPY_lexer.l"
{ return FLOPPY_GE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 89 "FLOPPY_lexer.l"
{ return FLOPPY_NE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 90 "FLOPPY_lexer.l"
{ return FLOPPY_NE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 92 "FLOPPY_lexer.l"
{ return FLOPPY_TRUE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 93 "FLOPPY_lexer.l"
{ return FLOPPY_FALSE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 95 "FLOPPY_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 57:
#line 98 "FLOPPY_lexer.l"
case 58:
YY_RULE_SETUP
#line 98 "FLOPPY_lexer.l"
{
                           yylval->fval = atof(yytext);
                           return FLOPPY_FLOATVAL;
                        }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 103 "FLOPPY_lexer.l"
{
                           yylval->ival = atol(yytext);
                           return FLOPPY_INTVAL;
                        }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 108 "FLOPPY_lexer.l"
{
                           yylval->sval = (char *) calloc(strlen(yytext + 1), sizeof(char));
                           memcpy(yylval->sval, yytext + 1, strlen(yytext + 1) - 1);
                           return FLOPPY_STRING;
                        }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 114 "FLOPPY_lexer.l"
{
                           yylval->sval = (char *) calloc(strlen(yytext + 1) - 1, sizeof(char));
                           memcpy(yylval->sval, yytext + 1, strlen(yytext + 1));
                           return FLOPPY_STRING;
                        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "FLOPPY_lexer.l"
{
                           yylval->sval = strdup(yytext);
                           return FLOPPY_ID;
                        }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 127 "FLOPPY_lexer.l"
{ 
                           fprintf(stderr, "FLOPPY Lex Error Unknown Token: %c\n", yytext[0]); 
                           return 0;
                        }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 131 "FLOPPY_lexer.l"
ECHO;
	YY_BREAK
#line 1706 "FLOPPY_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(BLOCKCOMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 488 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 488 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 487);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 131 "FLOPPY_lexer.l"


int yyerror(const char *errmsg) {
    fprintf(stderr, "[FLOPPY-Lexer-Error] %s\n", errmsg);
    return 0;
}

